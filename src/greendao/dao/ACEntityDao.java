package greendao.dao;

import greendao.DaoSession;
import greendao.bean.ACEntity;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;



// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ACENTITY".
*/
public class ACEntityDao extends AbstractDao<ACEntity, Long> {

    public static final String TABLENAME = "ACENTITY";

    /**
     * Properties of entity ACEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property IndexId = new Property(1, int.class, "indexId", false, "INDEX_ID");
        public final static Property IconId = new Property(2, int.class, "iconId", false, "ICON_ID");
        public final static Property StrText = new Property(3, String.class, "strText", false, "STR_TEXT");
        public final static Property Address = new Property(4, int.class, "address", false, "ADDRESS");
        public final static Property IsOpen = new Property(5, boolean.class, "isOpen", false, "IS_OPEN");
    };


    public ACEntityDao(DaoConfig config) {
        super(config);
    }
    
    public ACEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ACENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"INDEX_ID\" INTEGER NOT NULL ," + // 1: indexId
                "\"ICON_ID\" INTEGER NOT NULL ," + // 2: iconId
                "\"STR_TEXT\" TEXT NOT NULL ," + // 3: strText
                "\"ADDRESS\" INTEGER NOT NULL ," + // 4: address
                "\"IS_OPEN\" INTEGER NOT NULL );"); // 5: isOpen
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ACENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ACEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getIndexId());
        stmt.bindLong(3, entity.getIconId());
        stmt.bindString(4, entity.getStrText());
        stmt.bindLong(5, entity.getAddress());
        stmt.bindLong(6, entity.getIsOpen() ? 1L: 0L);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ACEntity readEntity(Cursor cursor, int offset) {
        ACEntity entity = new ACEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // indexId
            cursor.getInt(offset + 2), // iconId
            cursor.getString(offset + 3), // strText
            cursor.getInt(offset + 4), // address
            cursor.getShort(offset + 5) != 0 // isOpen
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ACEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIndexId(cursor.getInt(offset + 1));
        entity.setIconId(cursor.getInt(offset + 2));
        entity.setStrText(cursor.getString(offset + 3));
        entity.setAddress(cursor.getInt(offset + 4));
        entity.setIsOpen(cursor.getShort(offset + 5) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ACEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ACEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

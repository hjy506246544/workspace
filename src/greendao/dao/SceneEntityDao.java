package greendao.dao;

import greendao.DaoSession;
import greendao.bean.SceneEntity;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SCENE_ENTITY".
*/
public class SceneEntityDao extends AbstractDao<SceneEntity, Long> {

    public static final String TABLENAME = "SCENE_ENTITY";

    /**
     * Properties of entity SceneEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property StrName = new Property(1, String.class, "strName", false, "STR_NAME");
        public final static Property IconId = new Property(2, int.class, "iconId", false, "ICON_ID");
        public final static Property StrType = new Property(3, String.class, "strType", false, "STR_TYPE");
        public final static Property StrSubitemName = new Property(4, String.class, "strSubitemName", false, "STR_SUBITEM_NAME");
        public final static Property Action = new Property(5, int.class, "action", false, "ACTION");
        public final static Property ExeTimeSegment = new Property(6, int.class, "exeTimeSegment", false, "EXE_TIME_SEGMENT");
    };


    public SceneEntityDao(DaoConfig config) {
        super(config);
    }
    
    public SceneEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SCENE_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"STR_NAME\" TEXT NOT NULL ," + // 1: strName
                "\"ICON_ID\" INTEGER NOT NULL ," + // 2: iconId
                "\"STR_TYPE\" TEXT NOT NULL ," + // 3: strType
                "\"STR_SUBITEM_NAME\" TEXT NOT NULL ," + // 4: strSubitemName
                "\"ACTION\" INTEGER NOT NULL ," + // 5: action
                "\"EXE_TIME_SEGMENT\" INTEGER NOT NULL );"); // 6: exeTimeSegment
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SCENE_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SceneEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getStrName());
        stmt.bindLong(3, entity.getIconId());
        stmt.bindString(4, entity.getStrType());
        stmt.bindString(5, entity.getStrSubitemName());
        stmt.bindLong(6, entity.getAction());
        stmt.bindLong(7, entity.getExeTimeSegment());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SceneEntity readEntity(Cursor cursor, int offset) {
        SceneEntity entity = new SceneEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // strName
            cursor.getInt(offset + 2), // iconId
            cursor.getString(offset + 3), // strType
            cursor.getString(offset + 4), // strSubitemName
            cursor.getInt(offset + 5), // action
            cursor.getInt(offset + 6) // exeTimeSegment
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SceneEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStrName(cursor.getString(offset + 1));
        entity.setIconId(cursor.getInt(offset + 2));
        entity.setStrType(cursor.getString(offset + 3));
        entity.setStrSubitemName(cursor.getString(offset + 4));
        entity.setAction(cursor.getInt(offset + 5));
        entity.setExeTimeSegment(cursor.getInt(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(SceneEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(SceneEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
